from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import requests

TELEGRAM_TOKEN = ''
DEEPSEEK_API_KEY = ''

STYLE_PRESETS = {
    "official": "—É–ª—É—á—à–∞–π —Ç–µ–∫—Å—Ç –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ",
    "casual": "—É–ª—É—á—à–∞–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ—Å—Ç–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º —Å—Ç–∏–ª–µ",
    "emotional": "—É–ª—É—á—à–∞–π —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ —è—Ä–∫–∏–º –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º",
    "neutral": "—É–ª—É—á—à–∞–π —Ç–µ–∫—Å—Ç –≥—Ä–∞–º–æ—Ç–Ω–æ, –Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ç–æ–Ω–∞"
}

user_selected_style = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–ª—É—á—à–∞—é —Ç–µ–∫—Å—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /improve"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/improve ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n"
        "/style ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

# –ö–æ–º–∞–Ω–¥–∞ /improve –∏ /style
async def choose_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π", callback_data='style_official')],
        [InlineKeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", callback_data='style_casual')],
        [InlineKeyboardButton("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", callback_data='style_emotional')],
        [InlineKeyboardButton("–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", callback_data='style_neutral')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style_key = query.data.replace("style_", "")
    chat_id = query.message.chat_id
    user_selected_style[chat_id] = style_key
    await query.message.reply_text(f"‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {style_key}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.")

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_selected_style.pop(chat_id, None)
    await update.message.reply_text("–°—Ç–∏–ª—å —Å–±—Ä–æ—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /improve, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_text = update.message.text
    style = user_selected_style.get(chat_id)

    if not style:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /improve")
        return

    improved = await improve_text_variants(user_text, style, n=3)
    await update.message.reply_text(f"‚ú® –í–æ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n{improved}")

# –ó–∞–ø—Ä–æ—Å –∫ DeepSeek
async def improve_text_variants(user_text: str, style: str, n=3) -> str:
    style_instruction = STYLE_PRESETS.get(style.lower())
    if not style_instruction:
        return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style}"

    system_prompt = (
        f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–ª—É—á—à–∞—Ç—å —Ç–µ–∫—Å—Ç. "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç —Ç–µ–∫—Å—Ç, –∞ —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å {n} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, "
        f"–≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ. –í–æ—Ç —Å—Ç–∏–ª—å: {style_instruction}. "
        f"–ù–µ –æ–±—ä—è—Å–Ω—è–π. –ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π {n} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π."
    )

    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_text}
        ],
        "temperature": 0.8
    }

    try:
        r = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=payload)
        return r.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ DeepSeek: {e}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("improve", choose_style))
app.add_handler(CommandHandler("style", choose_style))
app.add_handler(CommandHandler("reset", reset_style))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∫–æ–º–∞–Ω–¥–∞–º–∏")
app.run_polling()
